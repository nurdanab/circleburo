#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
# –£–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ –º–∞–∫—Å–∏–º—É–º 1080p –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –¥–ª—è –≤–µ–±–∞

echo "üé¨ Video Optimization Script"
echo "================================"
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≤–∏–¥–µ–æ
VIDEO_DIR="public/img/projects"
BACKUP_DIR="${VIDEO_DIR}/originals"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
mkdir -p "$BACKUP_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
optimize_video() {
    local input_file="$1"
    local filename=$(basename "$input_file")
    local backup_file="${BACKUP_DIR}/${filename}.backup"
    local temp_file="${VIDEO_DIR}/${filename}.tmp.webm"

    echo -e "${YELLOW}Processing: ${filename}${NC}"

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    local width=$(ffprobe -v error -select_streams v:0 -show_entries stream=width -of default=noprint_wrappers=1:nokey=1 "$input_file")
    local height=$(ffprobe -v error -select_streams v:0 -show_entries stream=height -of default=noprint_wrappers=1:nokey=1 "$input_file")

    echo "  Current size: ${width}x${height}"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–∂–∏–º–∞—Ç—å
    local max_dimension=$((width > height ? width : height))

    if [ "$max_dimension" -gt 1080 ]; then
        echo -e "  ${RED}Size too large! Optimizing...${NC}"

        # –°–æ–∑–¥–∞–µ–º backup –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if [ ! -f "$backup_file" ]; then
            echo "  Creating backup..."
            cp "$input_file" "$backup_file"
        fi

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–º–∞–∫—Å 1080p —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º aspect ratio)
        local scale_filter
        if [ "$width" -gt "$height" ]; then
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
            scale_filter="scale=1080:-2"
        else
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
            scale_filter="scale=-2:1080"
        fi

        echo "  Compressing with ${scale_filter}..."

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
        ffmpeg -i "$input_file" \
            -c:v libvpx-vp9 \
            -crf 35 \
            -b:v 0 \
            -vf "$scale_filter" \
            -row-mt 1 \
            -tile-columns 2 \
            -threads 4 \
            -deadline good \
            -cpu-used 1 \
            -an \
            -y \
            "$temp_file" 2>&1 | grep -E '(frame=|error|Error)' || true

        if [ -f "$temp_file" ]; then
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä
            local new_width=$(ffprobe -v error -select_streams v:0 -show_entries stream=width -of default=noprint_wrappers=1:nokey=1 "$temp_file")
            local new_height=$(ffprobe -v error -select_streams v:0 -show_entries stream=height -of default=noprint_wrappers=1:nokey=1 "$temp_file")
            local old_size=$(du -h "$input_file" | cut -f1)
            local new_size=$(du -h "$temp_file" | cut -f1)

            # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            mv "$temp_file" "$input_file"

            echo -e "  ${GREEN}‚úì Done!${NC}"
            echo "    Old: ${width}x${height} (${old_size})"
            echo "    New: ${new_width}x${new_height} (${new_size})"
        else
            echo -e "  ${RED}‚úó Failed to optimize${NC}"
        fi
    else
        echo -e "  ${GREEN}‚úì Size OK, no optimization needed${NC}"
    fi

    echo ""
}

# –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
VIDEOS_TO_OPTIMIZE=(
    "${VIDEO_DIR}/motion-5.webm"  # 2160x3840 -> –Ω—É–∂–Ω–æ —Å–∂–∞—Ç—å!
    "${VIDEO_DIR}/motion-2.webm"  # 2160x1080 -> –Ω—É–∂–Ω–æ —Å–∂–∞—Ç—å!
    "${VIDEO_DIR}/motion-4.webm"  # 1920x1080 -> –Ω–µ–º–Ω–æ–≥–æ —Å–∂–∞—Ç—å
)

# –ò–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ:
# VIDEOS_TO_OPTIMIZE=("${VIDEO_DIR}"/*.webm)

echo "Videos to optimize:"
for video in "${VIDEOS_TO_OPTIMIZE[@]}"; do
    if [ -f "$video" ]; then
        echo "  - $(basename "$video")"
    fi
done
echo ""

read -p "Continue? (y/N) " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    for video in "${VIDEOS_TO_OPTIMIZE[@]}"; do
        if [ -f "$video" ]; then
            optimize_video "$video"
        else
            echo -e "${RED}File not found: $video${NC}"
        fi
    done

    echo ""
    echo -e "${GREEN}================================${NC}"
    echo -e "${GREEN}‚úì Optimization complete!${NC}"
    echo ""
    echo "Backups saved to: $BACKUP_DIR"
    echo ""
    echo "Next steps:"
    echo "1. Test videos at: http://localhost:5175/test-videos.html"
    echo "2. Check the website to see if videos load"
    echo "3. If satisfied, you can delete backups"
else
    echo "Cancelled."
fi
