#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–ª—é—á–µ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 */

const publicLocalesDir = path.join(__dirname, '..', 'public', 'locales');

function loadTranslationFile(lang) {
  const filePath = path.join(publicLocalesDir, lang, 'translation.json');
  try {
    return JSON.parse(fs.readFileSync(filePath, 'utf8'));
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${lang}:`, error.message);
    return {};
  }
}

function getValueByPath(obj, path) {
  return path.split('.').reduce((current, key) => {
    return current && current[key] !== undefined ? current[key] : undefined;
  }, obj);
}

function checkMissingKeys() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–ª—é—á–µ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...\n');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
  const ru = loadTranslationFile('ru');
  const en = loadTranslationFile('en');
  const kk = loadTranslationFile('kk');

  if (!ru || !en || !kk) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏');
    return;
  }

  // –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
  const testKeys = [
    'main.subtitle',
    'nav.home',
    'nav.services',
    'nav.about',
    'nav.portfolio',
    'nav.contact',
    'footer.description',
    'whyUs.title',
    'services.title',
    'circle.launchPr.title',
    'circle.socialMedia.title',
    'circle.designGuidebook.title',
    'semicircle.marketing.title',
    'cycle.socialMedia.title',
    'projects.subtitle',
    'aboutUs.title',
    'contactForm.title'
  ];

  const languages = { ru, en, kk };
  const languageNames = { ru: '–†—É—Å—Å–∫–∏–π', en: 'English', kk: '“ö–∞–∑–∞“õ—à–∞' };

  let hasIssues = false;

  console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤:\n');

  for (const key of testKeys) {
    console.log(`üîë ${key}:`);

    for (const [lang, data] of Object.entries(languages)) {
      const value = getValueByPath(data, key);
      if (value) {
        console.log(`   ‚úÖ ${languageNames[lang]}: "${value.substring(0, 50)}${value.length > 50 ? '...' : ''}"`);
      } else {
        console.log(`   ‚ùå ${languageNames[lang]}: –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
        hasIssues = true;
      }
    }
    console.log();
  }

  if (hasIssues) {
    console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.');
  } else {
    console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö!');
  }

  return !hasIssues;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
const success = checkMissingKeys();
process.exit(success ? 0 : 1);