#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 * –ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ /locales –≤ /public/locales
 */

const sourceDir = path.join(__dirname, '..', 'locales');
const targetDir = path.join(__dirname, '..', 'public', 'locales');

function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dirPath}`);
  }
}

function copyFile(source, target) {
  try {
    const sourceContent = fs.readFileSync(source, 'utf8');
    fs.writeFileSync(target, sourceContent, 'utf8');
    console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${path.basename(source)}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${source}:`, error.message);
  }
}

function syncLocales() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...\n');

  if (!fs.existsSync(sourceDir)) {
    console.error(`‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${sourceDir}`);
    process.exit(1);
  }

  ensureDirectoryExists(targetDir);

  const languages = fs.readdirSync(sourceDir).filter(item => {
    return fs.statSync(path.join(sourceDir, item)).isDirectory();
  });

  if (languages.length === 0) {
    console.log('‚ö†Ô∏è  –Ø–∑—ã–∫–æ–≤—ã–µ –ø–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏');
    return;
  }

  console.log(`üìÅ –ù–∞–π–¥–µ–Ω—ã —è–∑—ã–∫–∏: ${languages.join(', ')}\n`);

  languages.forEach(lang => {
    const sourceLangDir = path.join(sourceDir, lang);
    const targetLangDir = path.join(targetDir, lang);

    ensureDirectoryExists(targetLangDir);

    console.log(`üåê –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞: ${lang}`);

    const files = fs.readdirSync(sourceLangDir).filter(file =>
      file.endsWith('.json')
    );

    if (files.length === 0) {
      console.log(`   ‚ö†Ô∏è  –§–∞–π–ª—ã .json –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —è–∑—ã–∫–∞ ${lang}`);
      return;
    }

    files.forEach(file => {
      const sourceFile = path.join(sourceLangDir, file);
      const targetFile = path.join(targetLangDir, file);

      copyFile(sourceFile, targetFile);
    });

    console.log();
  });

  console.log('‚ú® –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('\nüìù –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ–∂–¥—É:');
  console.log(`   üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫: ${sourceDir}`);
  console.log(`   üìÇ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${targetDir}`);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
syncLocales();